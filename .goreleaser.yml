
env:
- GOPROXY=https://proxy.golang.org|direct
- GO111MODULE=on
- CGO_ENABLED=0
before:
  hooks:
    - go mod tidy
    - go mod download
builds:
  - id: manager
    main: ./cmd/manager/
    binary: manager
    goos:
    - linux
    goarch:
    - amd64
    - arm64
    - ppc64le
    - s390x
    tags:
    - "{{ .Env.GO_BUILD_TAGS }}"
    mod_timestamp: "{{ .CommitTimestamp }}"
    asmflags:
      - all=-trimpath={{ dir .Env.PWD }}
    gcflags:
      - all=-trimpath={{ dir .Env.PWD }}
    ldflags:
    - -X {{ .Env.VERSION_PKG }}.gitVersion={{ .Env.GIT_VERSION }}
    - -X {{ .Env.VERSION_PKG }}.gitCommit={{ .Env.GIT_COMMIT }}
    - -X {{ .Env.VERSION_PKG }}.gitTreeState={{ .Env.GIT_TREE_STATE }}
    - -X {{ .Env.VERSION_PKG }}.commitDate={{ .CommitTimestamp }}
dockers:
- image_templates:
  - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-amd64"
  dockerfile: Dockerfile
  goos: linux
  goarch: amd64
  use: buildx
  build_flag_templates:
    - "--platform=linux/amd64"
- image_templates:
    - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-arm64"
  dockerfile: Dockerfile
  goos: linux
  goarch: arm64
  use: buildx
  build_flag_templates:
    - "--platform=linux/arm64"
- image_templates:
    - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-ppc64le"
  dockerfile: Dockerfile
  goos: linux
  goarch: ppc64le
  use: buildx
  build_flag_templates:
    - "--platform=linux/ppc64le"
- image_templates:
    - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-s390x"
  dockerfile: Dockerfile
  goos: linux
  goarch: s390x
  use: buildx
  build_flag_templates:
    - "--platform=linux/s390x"
docker_manifests:
- name_template: "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}"
  image_templates:
    - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-amd64"
    - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-arm64"
    - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-ppc64le"
    - "{{ .Env.IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-s390x"
release:
  disable: '{{ ne .Env.ENABLE_RELEASE_PIPELINE "true" }}'
  extra_files:
  - glob: 'catalogd.yaml'
  header: |
    ## Installation
    ```bash
    kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/{{ .Env.CERT_MGR_VERSION }}/cert-manager.yaml
    kubectl wait --for=condition=Available --namespace=cert-manager deployment/cert-manager-webhook --timeout=60s
    kubectl apply -f https://github.com/operator-framework/catalogd/releases/download/{{ .Tag }}/catalogd.yaml
    ```
